<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ziwow.scrmapp.common.persistence.mapper.SmsSendRecordMapper">

    <insert id="saveSmsRecord" parameterType="com.ziwow.scrmapp.common.persistence.entity.SmsSendRecord">
        INSERT INTO t_sms_send_record (mobile,sync_time,orderType,register_time,send_time,send_count)
        VALUES(#{mobile},#{syncTime},#{orderType},#{registerTime},now(),#{sendCount})
    </insert>

    <insert id="batchSaveSmsRecord" parameterType="java.util.List">
        INSERT INTO t_sms_send_record (mobile,sync_time,orderType,register_time,send_time,send_count)
        VALUES
        <foreach collection = "list" item="item" separator =",">
            (#{item.mobile},#{item.syncTime},#{item.orderType},#{item.registerTime},now(),#{item.sendCount})
        </foreach>
    </insert>

    <update id="updateSmsRecord" parameterType="com.ziwow.scrmapp.common.persistence.entity.SmsSendRecord">
      UPDATE t_sms_send_record
        SET
        <if test = "mobile != null">
            mobile= #{mobile,jdbcType=VARCHAR},
        </if>
        <if test = "syncTime != null">
            sync_time= #{syncTime,jdbcType=DATE},
        </if>
        <if test = "orderType != null">
            orderType= #{orderType,jdbcType=INTEGER},
        </if>
        <if test = "registerTime != null">
            register_time= #{registerTime,jdbcType=TIMESTAMP},
        </if>
        <if test = "sendTime != null">
            send_time= #{sendTime,jdbcType=TIMESTAMP},
        </if>
        <if test= "sendCount != null">
            send_count = #{sendCount,jdbcType=INTEGER}
        </if>
      where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateSmsRecordRegTime" parameterType="String">
        UPDATE t_sms_send_record A
        INNER JOIN (
            SELECT
                id
            FROM
                t_sms_send_record
            WHERE
                mobile = #{mobile}
            ORDER BY
                send_time DESC
            LIMIT 0, 1
        ) B ON A.id = B.id
        SET A.register_time = NOW()
    </update>

    <update id="batchUpdateSmsRecord" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update t_sms_send_record
            <set>
                <if test="item.sendCount != null">
                    send_count = ${item.sendCount},
                </if>
                send_time = now()
            </set>
            where id = ${item.id}
        </foreach>
    </update>

    <select id="get2SendSmsRecord" resultType="com.ziwow.scrmapp.common.persistence.entity.SmsSendRecord">
        SELECT
            id,
            mobile,
            sync_time syncTime,
            orderType orderType,
            register_time registerTime,
            send_time sendTime,
            send_count sendCount
        FROM
            t_sms_send_record
        where
          send_count = 1
          and register_time is NULL
          and DATE_FORMAT(sync_time,'%Y-%m-%d') = DATE_SUB(curdate(),INTERVAL 1 DAY);
    </select>

    <select id="get5SendSmsRecord" resultType="com.ziwow.scrmapp.common.persistence.entity.SmsSendRecord">
        SELECT
            id,
            mobile,
            sync_time syncTime,
            orderType orderType,
            register_time registerTime,
            send_time sendTime,
            send_count sendCount
        FROM
            t_sms_send_record
        where
          send_count = 2
          and register_time is NULL
          and DATE_FORMAT(sync_time,'%Y-%m-%d') = DATE_SUB(curdate(),INTERVAL 4 DAY);
    </select>

    <select id="getSmsStatistics" resultType="com.ziwow.scrmapp.common.bean.vo.SmsStatisticsVo">
      SELECT
        T.sync_time dispatchDate,
        T.smsType,
        IFNULL(T.sendTolNum, 0) sendTolNum,
        IFNULL(T.installSendNum, 0) installSendNum,
        IFNULL(T.repairSendNum, 0) repairSendNum,
        IFNULL(T.maintainSendNum, 0) maintainSendNum,
        IFNULL(T.registerNum, 0) registerNum,
        IFNULL(T.installRegisterNum, 0) installRegisterNum,
        IFNULL(T.repairRegisterNum, 0) repairRegisterNum,
        IFNULL(T.maintainRegisterNum, 0) maintainRegisterNum
    FROM
        (
            SELECT
                A.sync_time,
                A.send_count smsType,
                IFNULL(A.sendTolNum, 0) sendTolNum,
                IFNULL(B.installSendNum, 0) installSendNum,
                IFNULL(C.repairSendNum, 0) repairSendNum,
                IFNULL(D.maintainSendNum, 0) maintainSendNum,
                IFNULL(E.registerNum, 0) registerNum,
                IFNULL(F.installRegisterNum, 0) installRegisterNum,
                IFNULL(G.repairRegisterNum, 0) repairRegisterNum,
                IFNULL(H.maintainRegisterNum, 0) maintainRegisterNum
            FROM
                (
                    SELECT
                        send_count,
                        sync_time,
                        COUNT(1) sendTolNum
                    FROM
                        t_sms_send_record
                    WHERE
                        send_count = #{smsType}
                    GROUP BY
                        sync_time
                ) A
            LEFT JOIN (
                SELECT
                    sync_time,
                    COUNT(1) installSendNum
                FROM
                    t_sms_send_record
                WHERE
                    send_count = #{smsType}
                AND orderType = 1
                GROUP BY
                    sync_time
            ) B ON A.sync_time = B.sync_time
            LEFT JOIN (
                SELECT
                    sync_time,
                    COUNT(1) repairSendNum
                FROM
                    t_sms_send_record
                WHERE
                    send_count = #{smsType}
                AND orderType = 2
                GROUP BY
                    sync_time
            ) C ON A.sync_time = C.sync_time
            LEFT JOIN (
                SELECT
                    sync_time,
                    COUNT(1) maintainSendNum
                FROM
                    t_sms_send_record
                WHERE
                    send_count = #{smsType}
                AND orderType = 3
                GROUP BY
                    sync_time
            ) D ON A.sync_time = D.sync_time
            LEFT JOIN (
                SELECT
                    sync_time,
                    COUNT(1) registerNum
                FROM
                    t_sms_send_record
                WHERE
                    send_count = #{smsType}
                AND register_time IS NOT NULL
                GROUP BY
                    sync_time
            ) E ON A.sync_time = E.sync_time
            LEFT JOIN (
                SELECT
                    sync_time,
                    COUNT(1) installRegisterNum
                FROM
                    t_sms_send_record
                WHERE
                    send_count = #{smsType}
                AND register_time IS NOT NULL
                AND orderType = 1
                GROUP BY
                    sync_time
            ) F ON A.sync_time = F.sync_time
            LEFT JOIN (
                SELECT
                    sync_time,
                    COUNT(1) repairRegisterNum
                FROM
                    t_sms_send_record
                WHERE
                    send_count = #{smsType}
                AND register_time IS NOT NULL
                AND orderType = 2
                GROUP BY
                    sync_time
            ) G ON A.sync_time = G.sync_time
            LEFT JOIN (
                SELECT
                    sync_time,
                    COUNT(1) maintainRegisterNum
                FROM
                    t_sms_send_record
                WHERE
                    send_count = #{smsType}
                AND register_time IS NOT NULL
                AND orderType = 3
                GROUP BY
                    sync_time
            ) H ON A.sync_time = H.sync_time
        ) T
    WHERE
        T.sync_time BETWEEN DATE_SUB(#{dispatchDate},INTERVAL 5 DAY) and #{dispatchDate}
    </select>

    <select id="getSmsSendRecordByMobile"
            resultType="com.ziwow.scrmapp.common.persistence.entity.SmsSendRecord">
        select id,mobile,sync_time syncTime,orderType,register_time registerTime,
        send_time sendTime,send_count sendCount from t_sms_send_record where mobile = #{mobile}
        AND DATE_FORMAT(send_time, '%Y-%m-%d') BETWEEN DATE_SUB(curdate(), INTERVAL 5 DAY)
        AND CURDATE()
    </select>
</mapper>